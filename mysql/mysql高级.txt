1、mysql架构
	配置文件
	逻辑架构
	存储引擎
2、索引优化分析

3、查询截取分析

4、mysql锁机制

5、主从复制
二进制文件  binlog

grant replication slave on *.* to 'root'@'192.168.43.138' identified by 'root1234';
GRANT REPLICATION SLAVE ON *.* to 'slave'@'192.168.43.138' identified by 'slave';

CREATE USER 'master'@'%' IDENTIFIED BY 'master';
alter user 'master'@'%' identified with mysql_native_password BY 'master';

GRANT REPLICATION SLAVE ON *.* TO 'master'@'%';
grant replication client,replication slave on *.* to 'master'@'%' identified by 'master';
GRANT ALL PRIVILEGES ON *.* TO 'master'@'%'; 
FLUSH PRIVILEGES;



CREATE USER 'haugv'@'192.168.43.208' IDENTIFIED WITH mysql_native_password BY 'haugv';
GRANT REPLICATION SLAVE ON *.* TO 'haugv'@'192.168.43.208' identified by 'haugv';
FLUSH PRIVILEGES;



MySQL配置文件
二进制日志
错误日志
查询日志（慢查询）
数据文件
如何配置？


连接层--》服务层--》存储引擎层--》文件系统层


mysql索引
复合索引优于单值索引
一个表的索引一般不超过5个为宜

覆盖索引，只返回索引列
index inx_a_b_c（a,b,c）
select a,b,c from t;

模糊查询两边都用百分号时，就要用覆盖索引（select 返回的列只能是表的主键，或者覆盖索引中的列，如果不是的话，就无法走覆盖索引）

join两个表时，索引的建立
左连接建右表，由连接建左表，表可对调连接位置
join语句多时，joinbuffer，变量的内存可以适当调大


永远小表驱动大表，小数据集驱动大数据集
减少连接次数

慢查询日志
slow_query_log (默认关闭，一般不开启，除非调优时开启分析慢查询后可选择关闭)
long_query_time （慢查询时间，默认10s，调优时使用分析）
开启慢查询命令：set global slow_query_log=1;

show global variables like '%trust%';
慢查询工具：
msqldumpslow -s r -t 10 LAPTOP-H61F8LT3-slow.log;

设置系统变量
set global long_query_time='3';

如果要设置变量永久生效，需要设置mysql配置文件

select sleep(3);
mysql线程睡眠

慢查询工具：msqldumpslow



log_bin_trust_function_creators：开启函数调用，避免批量插入报错
set global log_bin_trust_function_creators=1;

批量数据脚本插入数据（写方法）

show profile 调优测量
show variables like 'profiling%';
+------------------------+-------+
| Variable_name          | Value |
+------------------------+-------+
| profiling              | OFF   |
| profiling_history_size | 15    |
+------------------------+-------+

set profiling=on;
show profiles;
show profile cpu,block io for query 3;


MySQL锁机制
myisam
	锁分类：表锁、行锁
	读锁（共享锁）、写锁（排他锁）
	表锁（偏写）、行锁（偏读）

	lock table t read/write;
	unlock table t;

	当前session锁表，会造成其他session写阻塞等待
	释放锁后才可写

	查看哪些表被加锁：show open tables;0为没锁，1为锁定状态
	show status like 'table%';

	Table_locks_waited 值越高，锁竞争越激烈

innodb
	支持事务、使用行级锁
	ACID
	事务隔离级别（默认可重复读）
	查看当前默认事务隔离级别： show variables like 'transaction_isolation';
	+-----------------------+-----------------+
	| Variable_name         | Value           |
	+-----------------------+-----------------+
	| transaction_isolation | REPEATABLE-READ |
	+-----------------------+-----------------+
	行锁（偏写）
	对同一行数据进行写操作时，才有阻塞，不同数据行时不会

	如何给数据行上锁(锁定一行)
	select * from t where column ='xxx' for update;

show variables like '%innodb%lock';
show variables like '%innodb%';